#!/usr/bin/env tsx

/**
 * Script de test rapide pour v√©rifier la correction RLS
 * √Ä ex√©cuter apr√®s avoir appliqu√© le script SQL
 */

import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";

// Charger les variables d'environnement
dotenv.config({ path: ".env.local" });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testRLSFix() {
  console.log("üß™ TEST RAPIDE - Correction RLS");
  console.log("=".repeat(40));

  try {
    // 1. Test d'authentification
    console.log("\n1Ô∏è‚É£ Test d'authentification...");
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.signInWithPassword({
      email: "user@toto.com",
      password: "password123",
    });

    if (authError) {
      console.error("‚ùå Erreur d'authentification:", authError.message);
      return;
    }

    console.log("‚úÖ Authentification r√©ussie");
    console.log(`   Utilisateur: ${user?.email}`);
    console.log(`   ID: ${user?.id}`);

    // 2. Test d'acc√®s √† la table users
    console.log("\n2Ô∏è‚É£ Test d'acc√®s √† la table users...");
    const { data: userData, error: userError } = await supabase
      .from("users")
      .select("*")
      .eq("id", user?.id)
      .single();

    if (userError) {
      console.error("‚ùå Erreur d'acc√®s √† users:", userError.message);

      if (userError.message.includes("infinite recursion")) {
        console.log("\nüö® PROBL√àME: R√©cursion infinie toujours pr√©sente");
        console.log(
          "üí° Solution: Appliquez le script SQL dans le dashboard Supabase"
        );
        console.log("üìÑ Script: scripts/fix-rls-final.sql");
      }

      return;
    }

    console.log("‚úÖ Acc√®s √† la table users r√©ussi");
    console.log("üìä Donn√©es utilisateur:");
    console.log(`   - Email: ${userData.email}`);
    console.log(`   - Pr√©nom: ${userData.first_name || "Non d√©fini"}`);
    console.log(`   - Nom: ${userData.last_name || "Non d√©fini"}`);
    console.log(`   - R√¥le: ${userData.role || "Non d√©fini"}`);

    // 3. Test de mise √† jour
    console.log("\n3Ô∏è‚É£ Test de mise √† jour...");
    const { error: updateError } = await supabase
      .from("users")
      .update({ updated_at: new Date().toISOString() })
      .eq("id", user?.id);

    if (updateError) {
      console.error("‚ùå Erreur de mise √† jour:", updateError.message);
    } else {
      console.log("‚úÖ Mise √† jour r√©ussie");
    }

    // 4. Test de d√©connexion
    console.log("\n4Ô∏è‚É£ Test de d√©connexion...");
    const { error: signOutError } = await supabase.auth.signOut();

    if (signOutError) {
      console.error("‚ùå Erreur de d√©connexion:", signOutError.message);
    } else {
      console.log("‚úÖ D√©connexion r√©ussie");
    }

    // 5. R√©sum√©
    console.log("\nüéâ R√âSULTAT FINAL");
    console.log("=".repeat(20));
    console.log("‚úÖ Authentification: Fonctionnelle");
    console.log("‚úÖ Acc√®s aux donn√©es: Fonctionnel");
    console.log("‚úÖ Mise √† jour: Fonctionnelle");
    console.log("‚úÖ D√©connexion: Fonctionnelle");
    console.log("\nüéØ La correction RLS est r√©ussie !");
    console.log(
      "üåê Vous pouvez maintenant tester l'application sur http://localhost:3000"
    );
  } catch (error) {
    console.error("‚ùå Erreur inattendue:", error);
  }
}

async function main() {
  await testRLSFix();
}

main().catch(console.error);
