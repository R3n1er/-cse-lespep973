# Patterns Supabase

## Configuration

### Variables d'environnement

- **Fichier** : `.env.local`
- **Variables requises** :
  - `NEXT_PUBLIC_SUPABASE_URL`
  - `NEXT_PUBLIC_SUPABASE_ANON_KEY`
  - `SUPABASE_SERVICE_ROLE_KEY` (pour les scripts)

### Client Supabase

```typescript
// src/lib/supabase/config.ts
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabase = createClient(supabaseUrl, supabaseKey);
```

## Types TypeScript

### Génération des types

```bash
npx supabase gen types typescript --project-id your-project-id > src/lib/supabase/types.ts
```

### Types personnalisés

```typescript
// src/lib/supabase/types.ts
export interface Ticket {
  id: string;
  name: string;
  price: number;
  stock: number;
  category: "cinema" | "loisirs" | "culture" | "transport";
  // ...
}
```

## Migrations SQL

### Structure des migrations

- **Dossier** : `supabase/migrations/`
- **Nommage** : `YYYYMMDDHHMMSS_description.sql`
- **Exemple** : `20250727_get_blog_stats.sql`

### Patterns de migration

```sql
-- Création de table avec RLS
CREATE TABLE IF NOT EXISTS blog_posts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  content TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Activation RLS
ALTER TABLE blog_posts ENABLE ROW LEVEL SECURITY;

-- Politiques RLS
CREATE POLICY "Users can view published posts" ON blog_posts
  FOR SELECT USING (is_published = true);

-- Triggers pour updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_blog_posts_updated_at
  BEFORE UPDATE ON blog_posts
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
```

## Services métier

### Pattern de service

```typescript
// src/services/TicketService.ts
import { supabase } from "@/lib/supabase/config";
import { Ticket, TicketFilters } from "@/lib/supabase/types";

export class TicketService {
  static async getTickets(filters?: TicketFilters): Promise<Ticket[]> {
    let query = supabase.from("tickets").select("*").eq("is_active", true);

    // Appliquer les filtres...

    const { data, error } = await query;
    if (error) throw new Error("Impossible de récupérer les tickets");
    return data || [];
  }
}
```

## RLS (Row Level Security)

### Politiques recommandées

```sql
-- Lecture publique des articles publiés
CREATE POLICY "Public read access" ON blog_posts
  FOR SELECT USING (is_published = true);

-- Écriture pour les auteurs authentifiés
CREATE POLICY "Authors can create posts" ON blog_posts
  FOR INSERT WITH CHECK (auth.uid() = author_id);

-- Modification pour les auteurs
CREATE POLICY "Authors can update posts" ON blog_posts
  FOR UPDATE USING (auth.uid() = author_id);
```

## Fonctions SQL

### Pattern de fonction

```sql
CREATE OR REPLACE FUNCTION get_blog_stats()
RETURNS TABLE(
  total_posts integer,
  total_comments integer,
  total_reactions integer
) AS $$
BEGIN
  RETURN QUERY
  SELECT
    (SELECT COUNT(*) FROM blog_posts),
    (SELECT COUNT(*) FROM blog_comments),
    (SELECT COUNT(*) FROM blog_reactions);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

## Bonnes pratiques

1. **Sécurité** : Toujours activer RLS sur les tables
2. **Types** : Générer et maintenir les types TypeScript
3. **Migrations** : Versionner toutes les modifications de schéma
4. **Services** : Encapsuler la logique métier dans des services
5. **Erreurs** : Gérer les erreurs Supabase de manière appropriée
6. **Performance** : Utiliser les index et optimiser les requêtes
   description:
   globs:
   alwaysApply: false

---
